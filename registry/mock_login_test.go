// Code generated by github.com/efritz/go-mockgen 0.1.0; DO NOT EDIT.
// This file was generated by robots at
// 2019-06-19T11:52:19-05:00
// using the command
// $ go-mockgen -f github.com/ij-build/ij/registry -i Login -o mock_login_test.go

package registry

import "sync"

// MockLogin is a mock implementation of the Login interface (from the
// package github.com/ij-build/ij/registry) used for unit testing.
type MockLogin struct {
	// GetServerFunc is an instance of a mock function object controlling
	// the behavior of the method GetServer.
	GetServerFunc *LoginGetServerFunc
	// LoginFunc is an instance of a mock function object controlling the
	// behavior of the method Login.
	LoginFunc *LoginLoginFunc
}

// NewMockLogin creates a new mock of the Login interface. All methods
// return zero values for all results, unless overwritten.
func NewMockLogin() *MockLogin {
	return &MockLogin{
		GetServerFunc: &LoginGetServerFunc{
			defaultHook: func() (string, error) {
				return "", nil
			},
		},
		LoginFunc: &LoginLoginFunc{
			defaultHook: func() error {
				return nil
			},
		},
	}
}

// NewMockLoginFrom creates a new mock of the MockLogin interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockLoginFrom(i Login) *MockLogin {
	return &MockLogin{
		GetServerFunc: &LoginGetServerFunc{
			defaultHook: i.GetServer,
		},
		LoginFunc: &LoginLoginFunc{
			defaultHook: i.Login,
		},
	}
}

// LoginGetServerFunc describes the behavior when the GetServer method of
// the parent MockLogin instance is invoked.
type LoginGetServerFunc struct {
	defaultHook func() (string, error)
	hooks       []func() (string, error)
	history     []LoginGetServerFuncCall
	mutex       sync.Mutex
}

// GetServer delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogin) GetServer() (string, error) {
	r0, r1 := m.GetServerFunc.nextHook()()
	m.GetServerFunc.appendCall(LoginGetServerFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetServer method of
// the parent MockLogin instance is invoked and the hook queue is empty.
func (f *LoginGetServerFunc) SetDefaultHook(hook func() (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetServer method of the parent MockLogin instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoginGetServerFunc) PushHook(hook func() (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoginGetServerFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func() (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoginGetServerFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func() (string, error) {
		return r0, r1
	})
}

func (f *LoginGetServerFunc) nextHook() func() (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoginGetServerFunc) appendCall(r0 LoginGetServerFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoginGetServerFuncCall objects describing
// the invocations of this function.
func (f *LoginGetServerFunc) History() []LoginGetServerFuncCall {
	f.mutex.Lock()
	history := make([]LoginGetServerFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoginGetServerFuncCall is an object that describes an invocation of
// method GetServer on an instance of MockLogin.
type LoginGetServerFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LoginGetServerFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoginGetServerFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// LoginLoginFunc describes the behavior when the Login method of the parent
// MockLogin instance is invoked.
type LoginLoginFunc struct {
	defaultHook func() error
	hooks       []func() error
	history     []LoginLoginFuncCall
	mutex       sync.Mutex
}

// Login delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockLogin) Login() error {
	r0 := m.LoginFunc.nextHook()()
	m.LoginFunc.appendCall(LoginLoginFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Login method of the
// parent MockLogin instance is invoked and the hook queue is empty.
func (f *LoginLoginFunc) SetDefaultHook(hook func() error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Login method of the parent MockLogin instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *LoginLoginFunc) PushHook(hook func() error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultDefaultHook with a function that returns
// the given values.
func (f *LoginLoginFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func() error {
		return r0
	})
}

// PushReturn calls PushDefaultHook with a function that returns the given
// values.
func (f *LoginLoginFunc) PushReturn(r0 error) {
	f.PushHook(func() error {
		return r0
	})
}

func (f *LoginLoginFunc) nextHook() func() error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *LoginLoginFunc) appendCall(r0 LoginLoginFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of LoginLoginFuncCall objects describing the
// invocations of this function.
func (f *LoginLoginFunc) History() []LoginLoginFuncCall {
	f.mutex.Lock()
	history := make([]LoginLoginFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// LoginLoginFuncCall is an object that describes an invocation of method
// Login on an instance of MockLogin.
type LoginLoginFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c LoginLoginFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c LoginLoginFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}
